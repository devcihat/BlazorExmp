#pragma checksum "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "554e87187282285bd12904e20c9952a8ffc83286"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCase.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using BlazorCase;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\_Imports.razor"
using BlazorCase.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\Pages\Index.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 73 "C:\Users\Emir\Desktop\BlazorCase\BlazorCase\Pages\Index.razor"
       
    Employee employee = new Employee();
    Employee selectedEmp = null;
    Employee TempEmp = null;
    int _index = -1;
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    bool snackBar = false;

    List<Employee> employees = new List<Employee>()
    {
        new Employee(1,"Shakib","Male",Convert.ToDateTime("01-Jan-1995"),4),
        new Employee(2,"Mukti","Female",Convert.ToDateTime("13-Mar-2000"),2),
        new Employee(3,"Rohit","Male",Convert.ToDateTime("10-Dec-2004"),3)
    };


    public class Employee
    {
        public int EmployeeId { get; set; }
        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime JoiningDate { get; set; }
        public int YearOfExperience { get; set; }

        #region Constructors
        public Employee() { }
        public Employee(int employeeId,
                        string name,
                        string gender,
                        DateTime joiningDate,
                        int yearOfExperience)
        {
            EmployeeId = employeeId;
            Name = name;
            Gender = gender;
            JoiningDate = joiningDate;
            YearOfExperience = yearOfExperience;
        }
        #endregion
    }

    #region Methods
    private void AddEmployee(Employee emp)
    {
        emp.EmployeeId = employees.Count + 1;
        employees.Add(emp);
    }
    private void EditEmployee(Employee emp)
    {
        if(emp != null && emp.EmployeeId > 0)
        {
            int index = employees.FindIndex(a => a.EmployeeId == emp.EmployeeId);
            employees.RemoveAll(x => x.EmployeeId == emp.EmployeeId);
            employees.Insert(index, emp);
        }
    }
    private void DeleteEmployee()
    {
        _isDelete = true;
        if (employee != null && employee.EmployeeId > 0)
        {
            #region For MarSnackBar
            _index = employees.FindIndex(a=>a.EmployeeId==employee.EmployeeId);
            TempEmp = new Employee(employee.EmployeeId,
                                   employee.Name,
                                   employee.Gender,
                                   employee.JoiningDate,
                                   employee.YearOfExperience);
            snackBar = true;

            #endregion

            employees.Remove(employee);
            _isDelete = false;
            this.StateHasChanged();
        }
    }
    private void UndoDelete()
    {
        if(TempEmp != null && _index > 0)
        {
            employees.Insert(_index, TempEmp);
            TempEmp = null;
            _index = -1;
        }

    }

    #endregion

    #region Dialog Box Methods
    private void OpenDialog(bool isEdit)
    {
        _isEdit = isEdit;
        if (!_isEdit) employee = new Employee();
        dialogIsOpen = true;
    }
    private void okClick() //Save Emply Info
    {
        dialogIsOpen = false;
        if (!_isEdit) this.AddEmployee(employee);
        else this.EditEmployee(employee);
    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        if(selectedEmp !=null)
        {
            employee = selectedEmp;
            this.EditEmployee(selectedEmp);
        }
    }
    private void SelectionChangedEvent(object emp)
    {
        var currentEmp = (Employee)emp;
        if(currentEmp != null)
        {
            employee = currentEmp;
            selectedEmp = new Employee(currentEmp.EmployeeId,
                                       currentEmp.Name,
                                       currentEmp.Gender,
                                       currentEmp.JoiningDate,
                                       currentEmp.YearOfExperience);
        }
        else
        {
            selectedEmp = new Employee();
        }

        if (_isDelete) this.DeleteEmployee();
    }
    #endregion

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
